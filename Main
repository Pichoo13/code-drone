import ssl
ssl._create_default_https_context = ssl._create_unverified_context

import tensorflow_hub as hub
import cv2
import numpy
import tensorflow as tf
import pandas as pd
    #drone
from codrone_edu.drone import *
import logging
import threading
import time

# Carregar modelos
detector = hub.load("https://tfhub.dev/tensorflow/efficientdet/lite2/detection/1")
labels = pd.read_csv('raspberry-pi-tensorflow/labels.csv',sep=';',index_col='ID')
labels = labels['OBJECT (2017 REL.)']

cap = cv2.VideoCapture(0)

width = 512
height = 512

drone = Drone()
drone.pair()
drone.set_drone_LED(255,255,255,255)
drone.takeoff()

def rundrone(label):
    if(label=='cellphone'):
        drone.land()
    if(label=='person'):
        drone.move_forward(distance=50, units="cm", speed=1)
        time.sleep(3)

def runcv():
    #while(True):
        #Capture frame-by-frame
       
        #Convert img to RGB
        rgb = cv2.cvtColor(inp, cv2.COLOR_BGR2RGB)

        #Is optional but i recommend (float convertion and convert img to tensor image)
        rgb_tensor = tf.convert_to_tensor(rgb, dtype=tf.uint8)

        #Add dims to rgb_tensor
        rgb_tensor = tf.expand_dims(rgb_tensor , 0)
       
        boxes, scores, classes, num_detections = detector(rgb_tensor)
       
        pred_labels = classes.numpy().astype('int')[0]
       
        pred_labels = [labels[i] for i in pred_labels]
        pred_boxes = boxes.numpy()[0].astype('int')
        pred_scores = scores.numpy()[0]
   
    #loop throughout the detections and place a box around it  
        for score, (ymin,xmin,ymax,xmax), label in zip(pred_scores, pred_boxes, pred_labels):
            if score < 0.5:
                continue
               
            score_txt = f'{100 * round(score,0)}'
            img_boxes = cv2.rectangle(rgb,(xmin, ymax),(xmax, ymin),(0,255,0),1)      
            font = cv2.FONT_HERSHEY_SIMPLEX
            cv2.putText(img_boxes,label,(xmin, ymax-10), font, 0.5, (255,0,0), 1, cv2.LINE_AA)
            cv2.putText(img_boxes,score_txt,(xmax, ymax-10), font, 0.5, (255,0,0), 1, cv2.LINE_AA)
            #rundrone(label)
        # if(label=='person'):
            #print(label)
            cv2.imshow('black and white',img_boxes)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                        break
       
   
       
       


        #drone.close()
        #print("done")

           #Display the resulting frame
       
       
if __name__ == "__main__":
    #x = threading.Thread(target=rundrone, args=(0,))
    ret, frame = cap.read()
    inp = cv2.resize(frame, (width , height ))

        #Resize to respect the input_shape

    x = threading.Thread(target=runcv, args=())
    x.start()

# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()







